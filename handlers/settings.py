from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery

from keyboards.settings import sites_kb, categories_kb, currency_kb, settings_default_kb, prices_kb, \
    responses_kb
from utils import is_valid


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StatesMachine(StatesGroup):
    waiting_for_sites = State()
    waiting_for_categories = State()
    waiting_for_keywords = State()
    waiting_for_currency = State()
    waiting_for_prices = State()
    waiting_for_responses = State()
    active_searching = State()


# –Ω–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
async def setup_settings(callback: CallbackQuery, state: FSMContext):
    await state.update_data(user_id=callback.message.from_user.id)
    await StatesMachine.waiting_for_sites.set()

    callback.data = "first_start"
    await choose_sites(callback, state)


# –≤—ã–±–æ—Ä –±–∏—Ä–∂–∏
async def choose_sites(callback: CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer()

    # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data == "first_start":
        await state.update_data(chosen_sites=[])

    chosen_sites = (await state.get_data())["chosen_sites"]

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —Å–∞–π—Ç
    if callback.data.startswith("chosen"):
        if callback.data.replace("chosen ", "") in chosen_sites:
            chosen_sites.remove(callback.data.replace("chosen ", ""))
        else:
            chosen_sites.append(callback.data.replace("chosen ", ""))
        await state.update_data(chosen_sites=chosen_sites)

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–¥–∞–ª—å—à–µ"
    elif callback.data == "step_ahead":
        callback.data = "first_start"
        await StatesMachine.next()
        await choose_categories(callback, state)
        return

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç—ã:", reply_markup=sites_kb(chosen_sites))


# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def choose_categories(callback: CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer()

    # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data == "first_start":
        await state.update_data(chosen_category=[])

    chosen_category = (await state.get_data())["chosen_category"]

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if callback.data.startswith("chosen"):
        if callback.data.replace("chosen ", "") == chosen_category:
            await callback.answer()
            return
        else:
            chosen_category = callback.data.replace("chosen ", "")
            await state.update_data(chosen_category=chosen_category)

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞–ª—å—à–µ"
    elif callback.data == "step_ahead":
        callback.data = "first_start"
        await StatesMachine.next()
        await choose_keywords(callback, state)
        return

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥"
    elif callback.data == "step_back":
        callback.data = "returned"
        await StatesMachine.previous()
        await choose_sites(callback, state)
        return

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=categories_kb(chosen_category))


async def choose_keywords(callback, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–æ–π
    if type(callback) == CallbackQuery:
        # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await callback.answer()

        # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
        if callback.data == "first_start":
            await state.update_data(keywords=[])
            message_id = \
                await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è"
                                                 f" –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\. –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
                                                 f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\.\n\n"
                                                 f"üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n\n"
                                                 f"–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n", parse_mode="MarkDownV2",
                                                 reply_markup=settings_default_kb)

            await state.update_data(message_id=message_id)

        # –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
        elif callback.data == "returned":
            keywords = (await state.get_data())["keywords"]
            message_id = (await state.get_data())["message_id"]

            text = ''
            for word in keywords:
                text += "üîò " + word + "\n"
            await message_id.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è"
                                                f" –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\. –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
                                                f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\.\n\n"
                                                f"üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n\n"
                                                f"–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n*{text}*", parse_mode="MarkDownV2",
                                                reply_markup=settings_default_kb)

        # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞–ª—å—à–µ"
        elif callback.data == "step_ahead":
            callback.data = "first_start"
            await StatesMachine.next()
            await choose_currency(callback, state)
            return

        # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥"
        elif callback.data == "step_back":
            callback.data = "returned"
            await StatesMachine.previous()
            await choose_categories(callback, state)
            return

    # –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    else:
        message_id = (await state.get_data())["message_id"]
        keywords = (await state.get_data())["keywords"]

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞
        if not is_valid(callback.text):
            await callback.delete()
            return

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞
        callback.text = callback.text.lower()
        if callback.text in keywords:
            # –µ—Å–ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            keywords.remove(callback.text)
        else:
            # –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            keywords.append(callback.text)
        await state.update_data(keywords=keywords)
        await callback.delete()

        # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        text = ''
        for word in keywords:
            text += "üîò " + word + "\n"

        await message_id.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è"
                                   f" –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤\. –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
                                   f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\.\n\n"
                                   f"üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å\n\n"
                                   f"–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n*{text}*", parse_mode="MarkDownV2",
                                   reply_markup=settings_default_kb)


async def choose_currency(callback: CallbackQuery, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await callback.answer()

    # –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
    if callback.data == "first_start":
        await state.update_data(chosen_currency=None)

    chosen_currency = (await state.get_data())["chosen_currency"]

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤–∞–ª—é—Ç—É
    if callback.data.startswith("chosen"):
        if callback.data.replace("chosen ", "") == chosen_currency:
            return
        else:
            chosen_currency = callback.data.replace("chosen ", "")
            await state.update_data(chosen_currency=chosen_currency)

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–∞–ª—å—à–µ"
    elif callback.data == "step_ahead":
        callback.data = "first_start"
        await StatesMachine.next()
        await choose_prices(callback, state)
        return

    # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞–∑–∞–¥"
    elif callback.data == "step_back":
        callback.data = "returned"
        await StatesMachine.previous()
        await choose_keywords(callback, state)
        return

    # –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞–∫–∞–∑—ã:\n\n"
                                     "üí° –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ—Ä–∏–ª–∞–Ω—Å –±–∏—Ä–∂, —Ü–µ–Ω–∞ –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è "
                                     "–≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ –≤–∞–ª—é—Ç—É –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É\.\n\n"
                                     "üí° –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –∏ –≤—Å–µ–º–∏—Ä–Ω–æ –ø—Ä–∏–∑–Ω–∞–Ω–Ω–æ–≥–æ"
                                     " [–∏—Å—Ç–æ—á–Ω–∏–∫–∞](https://www.xe.com/company/)\.", disable_web_page_preview=True,
                                     parse_mode="MarkDownV2",
                                     reply_markup=currency_kb(chosen_currency))


async def choose_prices(callback, state: FSMContext):
    if type(callback) == CallbackQuery:
        # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await callback.answer()

        if callback.data == "first_start":
            await state.update_data(prices=[None, None])

            message_id = \
                await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\nüí° –í–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã "
                                                 f"–∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º —Ü–µ–Ω–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "
                                                 f"–∑–∞–∫–∞–∑–æ–≤ —Å –ª—é–±–æ–π —Ü–µ–Ω–æ–π –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\.\n\n"
                                                 f"üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–æ—Ç \*—Ü–µ–Ω–∞\*\" –∏"
                                                 f" –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\.\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n_–æ—Ç 500_\n\n"
                                                 f"üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–¥–æ \*—Ü–µ–Ω–∞\*\" –∏"
                                                 f" –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\.\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n_–¥–æ 5000_\n\n"
                                                 f"*–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:*\n–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –ª—é–±–æ–π —Ü–µ–Ω–æ–π ‚úÖ",
                                                 parse_mode="MarkDownV2",
                                                 reply_markup=prices_kb)

            await state.update_data(message_id=message_id)

        elif callback.data == "returned":
            prices = (await state.get_data())["prices"]
            message_id = (await state.get_data())["message_id"]

            text = ''
            for word in prices:
                if word is None:
                    continue
                text += "üîò " + word + "\n"
            else:
                if text == '':
                    text = '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –ª—é–±–æ–π —Ü–µ–Ω–æ–π ‚úÖ'
            await message_id.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n\nüí° –í–∞–º –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã "
                                                 f"–∑–∞–∫–∞–∑—ã —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º —Ü–µ–Ω–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ\. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "
                                                 f"–∑–∞–∫–∞–∑–æ–≤ —Å –ª—é–±–æ–π —Ü–µ–Ω–æ–π –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\.\n\n"
                                                 f"üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–æ—Ç \*—Ü–µ–Ω–∞\*\" –∏"
                                                 f" –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\.\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n_–æ—Ç 500_\n\n"
                                                 f"üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ \"–¥–æ \*—Ü–µ–Ω–∞\*\" –∏"
                                                 f" –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\.\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n_–¥–æ 5000_\n\n"
                                                 f"*–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:*\n{text}",
                                                 parse_mode="MarkDownV2",
                                                 reply_markup=prices_kb)

        elif callback.data == "step_ahead":
            callback.data = "first_start"
            await StatesMachine.next()
            await choose_responses(callback, state)
            return
        elif callback.data == "step_back":
            callback.data = "returned"
            await StatesMachine.previous()
            await choose_currency(callback, state)
            return

    else:
        pass


async def choose_responses(callback: CallbackQuery, state: FSMContext):
    if type(callback) == CallbackQuery:
        # —É–¥–∞–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await callback.answer()
        if callback.data == "first_start":
            await state.update_data(responses=None)

            message_id = \
                await callback.message.edit_text(f"–ù–∞–ø–∏—à–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ :\n\nüí° –í–∞–º *–ù–ï* –±—É–¥—É—Ç "
                                                 f"–ø–æ–∫–∞–∑–∞–Ω—ã –∑–∞–∫–∞–∑—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ"
                                                 f"–í–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ\. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∫–ª–∏–∫–æ–≤"
                                                 f" –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\.\n\n"
                                                 f"üí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Å–∫–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫–ª–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ"
                                                 f" —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç–∫–ª–∏–∫–æ–≤\."
                                                 f"\n*–ù–∞–ø—Ä–∏–º–µ—Ä:*\n7\n\n"
                                                 f"*–í—ã–±—Ä–∞–Ω–Ω–æ–µ –í–∞–º–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:*\n"
                                                 f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–∫–∞–∑—ã —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∫–ª–∏–∫–æ–≤ ‚úÖ",
                                                 parse_mode="MarkDownV2",
                                                 reply_markup=responses_kb)
        elif callback.data == "settings_done":
            callback.data = "first_start"
            await StatesMachine.next()
            return
        elif callback.data == "step_back":
            callback.data = "returned"
            await StatesMachine.previous()
            await choose_prices(callback, state)
            return

    else:
        pass


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_settings(dp: Dispatcher):
    dp.register_callback_query_handler(setup_settings, text="start_settings")
    dp.register_callback_query_handler(choose_sites,
                                       lambda call: call.data.startswith("chosen") or call.data == "step_ahead",
                                       state=StatesMachine.waiting_for_sites)

    dp.register_callback_query_handler(choose_categories,
                                       lambda call: call.data.startswith("chosen") or call.data.startswith("step"),
                                       state=StatesMachine.waiting_for_categories)
    dp.register_callback_query_handler(choose_keywords,
                                       lambda call: call.data.startswith("step"),
                                       state=StatesMachine.waiting_for_keywords)
    dp.register_message_handler(choose_keywords,
                                state=StatesMachine.waiting_for_keywords)
    dp.register_callback_query_handler(choose_currency,
                                       lambda call: call.data.startswith("chosen") or call.data.startswith("step"),
                                       state=StatesMachine.waiting_for_currency)
    dp.register_callback_query_handler(choose_prices,
                                       lambda call: call.data.startswith("step") or call.data == "chosen_any",
                                       state=StatesMachine.waiting_for_prices)
    dp.register_message_handler(choose_prices,
                                state=StatesMachine.waiting_for_prices)
    dp.register_callback_query_handler(choose_responses,
                                       lambda call: call.data in ["settings_done", "chosen_any", "step_back"],
                                       state=StatesMachine.waiting_for_responses)
    dp.register_message_handler(choose_responses,
                                state=StatesMachine.waiting_for_responses)
